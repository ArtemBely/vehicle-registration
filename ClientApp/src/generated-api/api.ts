/* tslint:disable */
/* eslint-disable */
/**
 * VehicleRegistration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CustomerDto
 */
export interface CustomerDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'surname': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface FactoryDto
 */
export interface FactoryDto {
    /**
     * 
     * @type {number}
     * @memberof FactoryDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FactoryDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FactoryDto
     */
    'factory_location'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FactoryDto
     */
    'director_id'?: number;
}
/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ProfileDto
 */
export interface ProfileDto {
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'normalizedUserName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'normalizedEmail'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileDto
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'passwordHash'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'securityStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'concurrencyStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileDto
     */
    'phoneNumberConfirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileDto
     */
    'twoFactorEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'lockoutEnd'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileDto
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ProfileDto
     */
    'accessFailedCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'surname'?: string | null;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {number}
     * @memberof Role
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'role_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'role_description'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdatePermissionDto
 */
export interface UpdatePermissionDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePermissionDto
     */
    'userName': string;
}
/**
 * 
 * @export
 * @interface VehicleDto
 */
export interface VehicleDto {
    /**
     * 
     * @type {number}
     * @memberof VehicleDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof VehicleDto
     */
    'carserie'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VehicleDto
     */
    'carbody'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VehicleDto
     */
    'motor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VehicleDto
     */
    'transmission'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VehicleDto
     */
    'werk'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VehicleDto
     */
    'baugruppe'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof VehicleDto
     */
    'knr7'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof VehicleDto
     */
    'pin13'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof VehicleDto
     */
    'factory_id'?: number | null;
}
/**
 * 
 * @export
 * @interface WeatherForecast
 */
export interface WeatherForecast {
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureC'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureF'?: number;
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    'summary'?: string | null;
}

/**
 * CustomerAnalyticsApi - axios parameter creator
 * @export
 */
export const CustomerAnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CustomerDto} [customerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminAnalyticsCustomersCreatePost: async (customerDto?: CustomerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/analytics/customers/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminAnalyticsCustomersDeleteDelete: async (email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/analytics/customers/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminAnalyticsCustomersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/analytics/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProfileDto} [profileDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminAnalyticsCustomersUpdatePut: async (profileDto?: ProfileDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/analytics/customers/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerAnalyticsApi - functional programming interface
 * @export
 */
export const CustomerAnalyticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerAnalyticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CustomerDto} [customerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminAnalyticsCustomersCreatePost(customerDto?: CustomerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminAnalyticsCustomersCreatePost(customerDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerAnalyticsApi.apiV1AdminAnalyticsCustomersCreatePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminAnalyticsCustomersDeleteDelete(email?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminAnalyticsCustomersDeleteDelete(email, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerAnalyticsApi.apiV1AdminAnalyticsCustomersDeleteDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminAnalyticsCustomersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProfileDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminAnalyticsCustomersGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerAnalyticsApi.apiV1AdminAnalyticsCustomersGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {ProfileDto} [profileDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminAnalyticsCustomersUpdatePut(profileDto?: ProfileDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminAnalyticsCustomersUpdatePut(profileDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CustomerAnalyticsApi.apiV1AdminAnalyticsCustomersUpdatePut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CustomerAnalyticsApi - factory interface
 * @export
 */
export const CustomerAnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerAnalyticsApiFp(configuration)
    return {
        /**
         * 
         * @param {CustomerDto} [customerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminAnalyticsCustomersCreatePost(customerDto?: CustomerDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AdminAnalyticsCustomersCreatePost(customerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminAnalyticsCustomersDeleteDelete(email?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AdminAnalyticsCustomersDeleteDelete(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminAnalyticsCustomersGet(options?: any): AxiosPromise<Array<ProfileDto>> {
            return localVarFp.apiV1AdminAnalyticsCustomersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProfileDto} [profileDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminAnalyticsCustomersUpdatePut(profileDto?: ProfileDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AdminAnalyticsCustomersUpdatePut(profileDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerAnalyticsApi - object-oriented interface
 * @export
 * @class CustomerAnalyticsApi
 * @extends {BaseAPI}
 */
export class CustomerAnalyticsApi extends BaseAPI {
    /**
     * 
     * @param {CustomerDto} [customerDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAnalyticsApi
     */
    public apiV1AdminAnalyticsCustomersCreatePost(customerDto?: CustomerDto, options?: AxiosRequestConfig) {
        return CustomerAnalyticsApiFp(this.configuration).apiV1AdminAnalyticsCustomersCreatePost(customerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAnalyticsApi
     */
    public apiV1AdminAnalyticsCustomersDeleteDelete(email?: string, options?: AxiosRequestConfig) {
        return CustomerAnalyticsApiFp(this.configuration).apiV1AdminAnalyticsCustomersDeleteDelete(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAnalyticsApi
     */
    public apiV1AdminAnalyticsCustomersGet(options?: AxiosRequestConfig) {
        return CustomerAnalyticsApiFp(this.configuration).apiV1AdminAnalyticsCustomersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProfileDto} [profileDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAnalyticsApi
     */
    public apiV1AdminAnalyticsCustomersUpdatePut(profileDto?: ProfileDto, options?: AxiosRequestConfig) {
        return CustomerAnalyticsApiFp(this.configuration).apiV1AdminAnalyticsCustomersUpdatePut(profileDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FactoryApi - axios parameter creator
 * @export
 */
export const FactoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserFactoriesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/factories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FactoryApi - functional programming interface
 * @export
 */
export const FactoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FactoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserFactoriesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FactoryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserFactoriesGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['FactoryApi.apiV1UserFactoriesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * FactoryApi - factory interface
 * @export
 */
export const FactoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FactoryApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserFactoriesGet(options?: any): AxiosPromise<Array<FactoryDto>> {
            return localVarFp.apiV1UserFactoriesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FactoryApi - object-oriented interface
 * @export
 * @class FactoryApi
 * @extends {BaseAPI}
 */
export class FactoryApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactoryApi
     */
    public apiV1UserFactoriesGet(options?: AxiosRequestConfig) {
        return FactoryApiFp(this.configuration).apiV1UserFactoriesGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RegisterApi - axios parameter creator
 * @export
 */
export const RegisterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CustomerDto} [customerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthCreatePost: async (customerDto?: CustomerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginDto} [loginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogonPost: async (loginDto?: LoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/logon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdatePermissionDto} [updatePermissionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthMakeAdminPost: async (updatePermissionDto?: UpdatePermissionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/make_admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePermissionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthSetRolesPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/set_roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegisterApi - functional programming interface
 * @export
 */
export const RegisterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegisterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CustomerDto} [customerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthCreatePost(customerDto?: CustomerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthCreatePost(customerDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RegisterApi.apiV1AuthCreatePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {LoginDto} [loginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthLogonPost(loginDto?: LoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLogonPost(loginDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RegisterApi.apiV1AuthLogonPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UpdatePermissionDto} [updatePermissionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthMakeAdminPost(updatePermissionDto?: UpdatePermissionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthMakeAdminPost(updatePermissionDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RegisterApi.apiV1AuthMakeAdminPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthSetRolesPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthSetRolesPost(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RegisterApi.apiV1AuthSetRolesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * RegisterApi - factory interface
 * @export
 */
export const RegisterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegisterApiFp(configuration)
    return {
        /**
         * 
         * @param {CustomerDto} [customerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthCreatePost(customerDto?: CustomerDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AuthCreatePost(customerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginDto} [loginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogonPost(loginDto?: LoginDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AuthLogonPost(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdatePermissionDto} [updatePermissionDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthMakeAdminPost(updatePermissionDto?: UpdatePermissionDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AuthMakeAdminPost(updatePermissionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthSetRolesPost(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AuthSetRolesPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegisterApi - object-oriented interface
 * @export
 * @class RegisterApi
 * @extends {BaseAPI}
 */
export class RegisterApi extends BaseAPI {
    /**
     * 
     * @param {CustomerDto} [customerDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public apiV1AuthCreatePost(customerDto?: CustomerDto, options?: AxiosRequestConfig) {
        return RegisterApiFp(this.configuration).apiV1AuthCreatePost(customerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginDto} [loginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public apiV1AuthLogonPost(loginDto?: LoginDto, options?: AxiosRequestConfig) {
        return RegisterApiFp(this.configuration).apiV1AuthLogonPost(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdatePermissionDto} [updatePermissionDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public apiV1AuthMakeAdminPost(updatePermissionDto?: UpdatePermissionDto, options?: AxiosRequestConfig) {
        return RegisterApiFp(this.configuration).apiV1AuthMakeAdminPost(updatePermissionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public apiV1AuthSetRolesPost(options?: AxiosRequestConfig) {
        return RegisterApiFp(this.configuration).apiV1AuthSetRolesPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RoleApi - axios parameter creator
 * @export
 */
export const RoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoleGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleApi.apiRoleGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoleGet(options?: any): AxiosPromise<Array<Role>> {
            return localVarFp.apiRoleGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiRoleGet(options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiRoleGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VehicleApi - axios parameter creator
 * @export
 */
export const VehicleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VehicleDto} [vehicleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserNewVehiclePost: async (vehicleDto?: VehicleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/new_vehicle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vehicleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserVehicleDeleteDelete: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/vehicle/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserVehicleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/vehicle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VehicleDto} [vehicleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserVehicleUpdatePut: async (vehicleDto?: VehicleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/vehicle/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vehicleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleApi - functional programming interface
 * @export
 */
export const VehicleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {VehicleDto} [vehicleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserNewVehiclePost(vehicleDto?: VehicleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserNewVehiclePost(vehicleDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['VehicleApi.apiV1UserNewVehiclePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserVehicleDeleteDelete(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserVehicleDeleteDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['VehicleApi.apiV1UserVehicleDeleteDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserVehicleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VehicleDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserVehicleGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['VehicleApi.apiV1UserVehicleGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {VehicleDto} [vehicleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserVehicleUpdatePut(vehicleDto?: VehicleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserVehicleUpdatePut(vehicleDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['VehicleApi.apiV1UserVehicleUpdatePut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * VehicleApi - factory interface
 * @export
 */
export const VehicleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleApiFp(configuration)
    return {
        /**
         * 
         * @param {VehicleDto} [vehicleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserNewVehiclePost(vehicleDto?: VehicleDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1UserNewVehiclePost(vehicleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserVehicleDeleteDelete(id?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1UserVehicleDeleteDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserVehicleGet(options?: any): AxiosPromise<Array<VehicleDto>> {
            return localVarFp.apiV1UserVehicleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VehicleDto} [vehicleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserVehicleUpdatePut(vehicleDto?: VehicleDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1UserVehicleUpdatePut(vehicleDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VehicleApi - object-oriented interface
 * @export
 * @class VehicleApi
 * @extends {BaseAPI}
 */
export class VehicleApi extends BaseAPI {
    /**
     * 
     * @param {VehicleDto} [vehicleDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public apiV1UserNewVehiclePost(vehicleDto?: VehicleDto, options?: AxiosRequestConfig) {
        return VehicleApiFp(this.configuration).apiV1UserNewVehiclePost(vehicleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public apiV1UserVehicleDeleteDelete(id?: number, options?: AxiosRequestConfig) {
        return VehicleApiFp(this.configuration).apiV1UserVehicleDeleteDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public apiV1UserVehicleGet(options?: AxiosRequestConfig) {
        return VehicleApiFp(this.configuration).apiV1UserVehicleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VehicleDto} [vehicleDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public apiV1UserVehicleUpdatePut(vehicleDto?: VehicleDto, options?: AxiosRequestConfig) {
        return VehicleApiFp(this.configuration).apiV1UserVehicleUpdatePut(vehicleDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WeatherForecastApi - axios parameter creator
 * @export
 */
export const WeatherForecastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherForecastGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WeatherForecast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeatherForecastApi - functional programming interface
 * @export
 */
export const WeatherForecastApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WeatherForecastApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherForecastGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WeatherForecast>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherForecastGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WeatherForecastApi.weatherForecastGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WeatherForecastApi - factory interface
 * @export
 */
export const WeatherForecastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WeatherForecastApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherForecastGet(options?: any): AxiosPromise<Array<WeatherForecast>> {
            return localVarFp.weatherForecastGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WeatherForecastApi - object-oriented interface
 * @export
 * @class WeatherForecastApi
 * @extends {BaseAPI}
 */
export class WeatherForecastApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherForecastApi
     */
    public weatherForecastGet(options?: AxiosRequestConfig) {
        return WeatherForecastApiFp(this.configuration).weatherForecastGet(options).then((request) => request(this.axios, this.basePath));
    }
}



